#pragma once
#include "CBuilding.h"
#include "colony_colonists/CColonist.h"
#include "colony_resources/CResourceList.h"
#include "scene/3d/node_3d.h"

//class CColonist ;

/// \brief Instanced building in game.
/// # VIRTUAL FUNCTIONS
///     -
///     -
/// #
// class CBuildingWorld : public Node3D
// {
//     GDCLASS(CBuildingWorld, Node3D);
//
// protected:
//     static void _bind_methods();
//     void _notification(int p_notification);
//
//     Ref<CBuilding> building;
//     Vector<Ref<CColonist>> colonistWorkers;
//     Vector<Ref<CColonist>> colonistHoused = {};
//     
// public:
//     CBuildingWorld(){};
//     ~CBuildingWorld()override {};
//
//     Ref<CBuilding> get_building(){return this->building;};
//     void set_building(const Ref<CBuilding> newBuilding){this->building = newBuilding;}
//     
//     /// \brief When this building is added to game server.
//     void on_world_enter(){};
//     GDVIRTUAL0(on_world_enter);
//     
//     /// \brief When this building is removed from game server.
//     void on_world_exit(){};
//     GDVIRTUAL0(on_world_exit);
//     
//     /// \brief Called when this building produces resources.
//     /// \return Collection of resources generated by this building. 
//     Ref<CResourceCountList> on_resource_complete();
//     GDVIRTUAL0RC(Ref<CResourceCountList>, on_resource_complete);
//
//     void AddWorker(Ref<CColonist> colonist);
//     void RemoveWorker(Ref<CColonist> colonist);
//
//     void AddHousedColonist(Ref<CColonist> colonist);
//     void RemoveHousedColonist(Ref<CColonist> colonist);
//
//     bool HasHousingCapacity();
//     bool HasJobCapacity();
//     
//     bool HasJobCapacityByType(Ref<CJobRole> jobRole);
//     
//     int JobCountByType(Ref<CJobRole> jobRole);
//
//     Vector<Ref<CColonist>> get_colonist_workers() const;
//     void set_colonist_workers(const Vector<Ref<CColonist>>& colonist_workers);
//     
//     Vector<Ref<CColonist>> get_colonist_housed() const;
//     void set_colonist_housed(const Vector<Ref<CColonist>>& colonist_housed);
// };
